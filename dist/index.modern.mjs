import e from"axios";function s(){return s=Object.assign?Object.assign.bind():function(e){for(var s=1;s<arguments.length;s++){var t=arguments[s];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},s.apply(this,arguments)}var t;!function(e){e.PROD="https://api-prod.getmessenger.ng",e.STAGING="https://api-staging.getmessenger.ng"}(t||(t={}));class n{constructor(s,n,i){var r=this;if(this.baseURL=void 0,this.publicKey=void 0,this.privateKey=void 0,this.axiosInstance=void 0,this.environment=t.PROD,this.baseAuthUrl=void 0,this.accessToken=null,this.authenticationData=null,this.baseAuthUrl="/auth",!s||!n)throw new Error("Public or Private keys are required!");this.environment||console.warn("No environment specified. Defaulting to development."),this.environment=i||"development",this.baseURL="test"===this.environment||"development"===this.environment?t.STAGING:t.PROD,this.publicKey=s,this.privateKey=n,this.axiosInstance=e.create({baseURL:this.baseURL,headers:{"Content-Type":"application/json"}}),this.axiosInstance.interceptors.response.use(e=>e,async function(s){return s.response&&401===s.response.status?(r.login(),e(s.config)):Promise.reject(s)})}async login(){if(!this.publicKey||!this.privateKey)throw new Error("Public or Private keys are required!");this.environment||console.warn("No environment specified. Defaulting to development.");const e=Buffer.from(`${this.publicKey}:${this.privateKey}`).toString("base64");try{const s=await this.axiosInstance.post(`${this.baseAuthUrl}/login`,{},{headers:{Authorization:`Basic ${e}`},auth:{username:this.publicKey,password:this.privateKey}});return this.accessToken=s.headers["access-token"],s.data}catch(e){var s;return console.warn(null==e||null==(s=e.response)||null==(s=s.data)?void 0:s.message),e.response.data}}async makeApiRequest(t){try{if(!this.accessToken)throw new Error("Access token is missing or invalid.");return t.headers=s({},t.headers,{Authorization:`Bearer ${this.accessToken}`}),(await this.axiosInstance(t)).data}catch(s){if(e.isAxiosError(s)){var n;const e=s;if(e.response&&401===e.response.status)return console.error("Received 401. Attempting to refresh access token..."),await this.login(),console.log(this.login()),console.log("Access token successfully refreshed. Retrying the request."),this.makeApiRequest(t);throw console.error("API request failed:",null==e||null==(n=e.response)?void 0:n.data),e}throw console.error("Unknown error:",s),s}}getAccessToken(){return this.accessToken?this.accessToken:null}}class i extends n{}export{i as default};
