import e from"axios";function t(){return t=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var s=arguments[t];for(var r in s)Object.prototype.hasOwnProperty.call(s,r)&&(e[r]=s[r])}return e},t.apply(this,arguments)}var s;!function(e){e.PROD="https://api-prod.getmessenger.ng",e.STAGING="https://api-staging.getmessenger.ng"}(s||(s={}));class r{constructor(t,r,i){var n=this;if(this.baseURL=void 0,this.publicKey=void 0,this.privateKey=void 0,this.axiosInstance=void 0,this.environment=s.PROD,this.baseAuthUrl=void 0,this.accessToken=null,this.authenticationData=null,this.baseAuthUrl="/auth",!t||!r)throw new Error("Public or Private keys are required!");this.environment||console.warn("No environment specified. Defaulting to development."),this.environment=i||"development",this.baseURL="test"===this.environment||"development"===this.environment?s.STAGING:s.PROD,this.publicKey=t,this.privateKey=r,this.axiosInstance=e.create({baseURL:this.baseURL,headers:{"Content-Type":"application/json"}}),this.axiosInstance.interceptors.response.use(e=>e,async function(t){return t.response&&401===t.response.status?(n.login(),e(t.config)):Promise.reject(t)})}async login(){if(!this.publicKey||!this.privateKey)throw new Error("Public or Private keys are required!");this.environment||console.warn("No environment specified. Defaulting to development.");const e=Buffer.from(`${this.publicKey}:${this.privateKey}`).toString("base64");try{const t=await this.axiosInstance.post(`${this.baseAuthUrl}/login`,{},{headers:{Authorization:`Basic ${e}`},auth:{username:this.publicKey,password:this.privateKey}});return this.accessToken=t.headers["access-token"],t.data}catch(e){var t;return console.warn(null==e||null==(t=e.response)||null==(t=t.data)?void 0:t.message),e.response.data}}async makeApiRequest(s){try{if(!this.accessToken)throw new Error("Access token is missing or invalid.");return s.headers=t({},s.headers,{Authorization:`Bearer ${this.accessToken}`}),(await this.axiosInstance(s)).data}catch(t){if(e.isAxiosError(t)){var r;const e=t;if(e.response&&401===e.response.status)return console.error("Received 401. Attempting to refresh access token..."),await this.login(),console.log(this.login()),console.log("Access token successfully refreshed. Retrying the request."),this.makeApiRequest(s);throw console.error("API request failed:",null==e||null==(r=e.response)?void 0:r.data),e}throw console.error("Unknown error:",t),t}}getAccessToken(){return this.accessToken?this.accessToken:null}}class i extends r{constructor(e,t,s){super(e,t,s),this.baseWalletUrl=void 0,this.baseWalletUrl="/wallets"}async checkWalletBalance(){return this.makeApiRequest({method:"get",url:this.baseWalletUrl})}async getAllTransactions(e){return this.makeApiRequest({method:"get",url:`${this.baseWalletUrl}/${e}/transactions`})}async getTransactionByReference(e){return this.makeApiRequest({method:"get",url:`${this.baseWalletUrl}/transactions/${e}`})}}class n extends i{constructor(e,t,s){super(e,t,s),this.baseOrderUrl=void 0,this.baseOrderUrl="/orders"}async estimateOrder(e){return this.makeApiRequest({method:"post",url:`${this.baseOrderUrl}/estimate`,data:e})}async getAddressCoordinates(e){return this.makeApiRequest({method:"post",url:`${this.baseOrderUrl}/get-address-coordinates`,data:e})}async confirmOrder(e){return this.makeApiRequest({method:"post",url:`${this.baseOrderUrl}/confirm`,data:e})}async cancelOrder(e,t){return this.makeApiRequest({method:"post",url:`${this.baseOrderUrl}/${t}/cancel`,data:e})}async disputeOrder(e,t){return this.makeApiRequest({method:"post",url:`${this.baseOrderUrl}/${t}/dispute`,data:e})}async fetchOrders(){return this.makeApiRequest({method:"get",url:`${this.baseOrderUrl}`})}async fetchOrderById(e){return this.makeApiRequest({method:"get",url:`${this.baseOrderUrl}/${e}`})}async fetchOrdersAnalytics(){return this.makeApiRequest({method:"get",url:`${this.baseOrderUrl}/analytics`})}}class a extends n{constructor(e,t,s){super(e,t,s)}}export{a as default};
